All right, we saw in our last video like how we can write a simple test with Cyprus and how it is actually
executing and it was working fine without any problem.
But you can see that the application itself is kind of very, very small and doesn't really have a lot
of components.
Let's assume that the developer has seen this particular application and there are some new requirements
and the changes are coming in and the application is starting to build for us.
So what I'm going to do is I'm just going to be doing exactly the same kind of operation, pretty much
like a developer, not even closing the Cyprus component astronaut.
So I'm just going to be running this once again and I will show you how the same thing can be developed
even in the developmental stage.
So you can see that currently the test is running so that it'd be running for us, which is quite cool.
So I'm just going to go over here and write.
So the click is happening.
I don't really want to click.
So probably I'm just going to come on this particular piece of code and you can see that this is running
side by side.
And I'm just going to do this.
I'm just going to put this guy on a side-by-side basis so that we can see how beautiful it is been written.
Over here and this guy is going to be sitting for us over here, which is quite cool, and now I'm going
to start developing my application.
So all I'm going to be doing this time is I'm actually going to start adding some new features to my
application.
So I'm just going to create a new integrated terminal over here.
So let's put that thing over here.
I'm going to say you can add off material UI, of course.
So this is going to be basically going to give us like a theme of the material UI, which is required
for us to actually get some material teams, which I can really use.
And I'm also going to be using the material, you icons, because it's going to give me some more materials,
UI icons kind of thing, and then I can start using them all within my code.
So I think these are the two new packages I have added within my application.
And then I'm just going to go back to my app file over here and I'm going to start modifying this a
bit.
So basically what I'm going to do is I'm just going to get rid of this particular thing over here like
it did of the source app DRC, Reload, Learn.
I don't really like this picture design, so probably I'm just going to remove this.
I'm also going to remove this guy and I'm going to start adding new code.
So format the document over here, which is quite cool.
And let's say there is a new feature be introduced in an application by our developers.
They say that they are going to be introducing a new text area and a select dropdown for us, something
like this.
So once they do that and once I save this, you will see that instantly the application has been modified
and even the test is running side by side.
And you can see that we have a new R select box over here.
And there is a text area for us which actually shows this particular text over here.
And now that as a tester, we actually need to verify if this is actually working fine or not.
And as a tester, we already have a handle of our application, which is kind of being modified.
And we going to do is we need to just see the dropdown is working fine or not like the application is
going to work fine, but not so far doing that.
I'm just going to do the same doget, which is going to be for the selector operation, which I'm going
to be doing.
So if I just do the same playground operation, I can just do a slide and you can see that it is actually
getting us that particular detail, which is quite cool.
So all these leveraging of the Cyprus power is coming in for us.
We can do that and then I can just do a select based on its text.
So I'm going to do something like, let's say instead of this dropdown to select probably of Cyprus,
they're safe.
I want to start a test project so I can just go over here.
You can just do a test project and I'm just going to hit control s and you will see that the test project
is being selected.
So we are actually testing the components side by side while it is being developed.
And if I wanted to really verify the text area is also something I need to verify, then I can do that
as well.
So let's say for the text area, I don't know what is the control.
So I can just read the playground, I can select this guy, I can select this controller, I can put
this guy over here and then I can say, should.
And I can just do this and you will see that the whole intelligence comes in, which is the power of
Cyprus itself, and I'm going to say contained text, as probably I can just put a bit of content from
here so that I'm not saying Cyprus, this is awesome, something like that that's going to copy this
and pasted over here.
That's it.
So you can see that.
I can verify that as well.
Side by side.
So while the application is being developed, I can verify the components in side by side manner.
And this way we can easily leverage the power of changes in component level like an EU wide level.
And this is exactly what the developers are also going to be doing while they do the UI testing.
And if you are a developer who is watching this particular video, probably you know how easy it is
to work with Cyprus, because this is the same tool which is going to be used by the testers within
your team who are going to be leveraging the same power and the same framework and driver to perform
this operation.
So you won't be going wrong anywhere where the test actually runs on this automation testing tool.
So this way we could see that we could be able to leverage the power of Cyprus component testing in
both application development as well as testing the application component.
In our next video, we're going to add even more components and then we'll wrap up this whole section.
