
So today we are going to write a very super simple chord with Cyprus and understand how things work.
So until our last video, we discussed how we can do the installation.
And also we saw a complete introduction of Cyprus.
And today we're going to write a very super simple chord with Cyprus and see how we can leverage the
power of Cyprus intelligence and its awesome library to perform the same kind of operation that we are
doing all these days with different tools like selenium.
But just that the ID is completely, much simpler and much easier with Cyprus.
So we are going to write a very super simple chord to get started to Cyprus instead of talking too much
on theories.
So the caller of going right is going to look something like this.
As you can see, it has a block of the Mochae.
And if you have only a knowledge on different testing framework like Molcajete is Jasmine.
And again, Jasmine Almalki is something that I have already discussed in my protractor course, which
is there like a few tidbits in my YouTube channel.
So you can go ahead and watch there.
And it's exactly the same framework that we are going to use it to here.
And again, don't worry too much about how the more Carti framework is actually designed or how it actually
works is very simple.
All you have to do is you have to use that described block, which is like a context where it has like
a scenario.

And within this scenario you can have like multiple scenarios grouped something like an ID block.
So it here is like perform log-in.
It's like a scenario where it's going to perform this operation.
And so there is something called a setup here.
It's all like scenarios.
So if you write any code with an ID block, it is considered as a single atomic test.
And if you write one more ID block, it is going to be acting like another block of text.
So you cannot just have a dependency or something like that.
You can create some dependency within an ID block, but it is not a good practice to create.
Dependency is always better to have an atomic ID block and each ID block is considered as a scenario
or maybe a specification to run the test for you.
Right.
So within this block you can see that I'm performing and visit of this particular website this year,
Abdah sawmiller to come.
And once again, this is are or this application.
I have used a lot in many different grade courses, which is released by me on YouTube channels, and
udemy something like advanced training, C Sharp or Advanced Framework Development with Selenium, Java
and even protractor courses.
So this is exactly the same website I have used in many places, and that's exactly I'm going to be
using for this course as well.
So this is the website I'm going to be navigating so you can see that the super simple API that I mentioned
here is like Siwy dot visit.
So this visit is going to visit this particular page.
So super simple.
It is.
The wording that they use to perform the operation is very, very super simple.
The method names are really easy to remember for testers like us.
Similar, they use something called a seewhy that contain or say that contains.
I'll be using cia. naming a site so that it is going to be something which is going to be I'm using
interchangeably with the way our site.
So make sure that you remember that.
So say that contains.
So here is a site that contains meaning that I'm going to be looking for.
You are all like login and then I'm going to be performing a click operation so you can see that I can
keep on changing as much as possible, meaning I can use the contains dot and it works similarly after
contains.
If you want to verify that, if it really contains that, you can still do something like that should.
And then you can see if it's text is equal to login or something like that, you can do that as well.
Similarly, you can keep on changing and then you can perform a click.
So this training mechanism is built out of the box within Cyprus.
It's like a fluent way of writing the code.
And then, as you can see, it has something called as Seida get to username DOCTYPE, everything's
going to be like you're going to search for this username with its ID and then you're going to type
password username as admin somebody for the password even type the password is password and then they're
going to click the button dogsbody and that's it.
That's super simple is to write the code here.
So this method is basically you're going to get the error in defiance of the applications UI and then
you're going to type the value in there.
That's what it is.
So you can see the method names are very easy to remember so that we can start writing the code much
easily.
So let's quickly see everything in action and understand how things work so far that I'm gonna flip
to my visual studio card.
So this is the same as Australia code that we discussed in our previous video.
This is the same window.
So I'm just going to close.
I don't know, for some reason it has been saved, doesn't like that.
And then here within this nade within the Cyprus folder.
So you don't really have to worry about the normal Androscoggin module folders.
Rather, you're going to be worrying about the Cyprus folder.
So here in this example, I'm just going to make use of this folder for now, I'm just going to call
this as IDOT Specter Jass.
So this is my automation test, which is going to be sitting and as you can see, and just going to
cheat or maybe I'm just going to copy some of the stuff from here and I can just pass it over here so
that I can reference this Cyprus.
So this is how you can keep on writing.
The next thing I'm going to do is I'm just going to write a super simple code so you can use that describe
block or you can also use the context block.
And once again, context and describes are something which is like an alias.
So the describe is the actual method and context is actually the alias of described.
So some people prefer to go with context or some people prefer to go with describe block so you can
go with anything that you actually like.
So I'm just going to use describe for now just to make sure the people who have background from protractor
or they have worked other different frameworks, they'll be very happy to use this kind of commands
if I do that.
So I'm going to be doing a testing of each application and then the callback.
I'm just going to use the lambda arrow function here.
So this is the way that you can do the callback within the JavaScript, right?
So it's exactly the same callback that I'm doing.
And within this describe, I'm going to need it block.
So I'm going to say login application.
So within this login app, I'm just going to use our site so you can see what else I hate to say.
Just brings me up all the different methods that I'm going to be using.
Something like and as blurr check children.
Claire, Claire cookies.
Oh my God.
They have so many different methods to be actually worked with.
So we are going to be actually touching some of the most important method in this course to see how
we can leverage the power of Cyprus itself.
But as of now, we are going to be using this visit method.
So within this visit method, I just have to posit that you are a sort of father.
You are a you can directly go to the Chrome browser and I'm going to search for what it's called as
this year, Dorsami dot com.
So this is the application that I'm actually going to work with Paysite over here.
So once I do visit it, I need to perform a logging operation.
So far, the logging operation, I actually have this guy, this login button.
So if I want to click this particular, you are allowed the login button in selenium.
We use something called the link text.
So find element binding text in here in Cyprus.
There are various different way of doing that.
One of the most common way of doing is by using this contains method and then this contains I can just
type this log in.
That's it.
I'm just going to say it, but I want to show you some magical things that the test playground that
we are doing in our previous video is going to do things for us.
So if I go to this particular Cyprus window here, you can see that we have this inspector just magically
added for us this time, which was something not available until our last video.
So once I created this, it automatically added things for me.
So if I click this, do you see the test is actually running for us?
It opened the door for me dot com and also verified.
Whether the text contains login, so if I just hover there, you can see that it actually shows me what
is this log in, which is really cool.
I did nothing.
I just put the container there and it is actually showing me the log in over there.
You can see it also doing an assertion.
That's why there is this green color thing in here.
So let's see if I just change this to maybe log ins.
And if I see this once I say, do you see there is something running in the terminal side?
What is saying that is is actually running the test for me behind the scene so I can do it again.
So if I see if do you see actually running and it's checking for the containers log in and it failed.
So it is actually waiting for the DOM to be completely rendered and it is also going to verify whether
the text login is actually there.
The link text login exist in the page anywhere.
Couldn't find that and it failed.
Which is really cool.
So it does all these operation for us mean just one single command waiting and it identifies the element
within the page.
It has to do that solutions for us, everything within one single command.
And that's the part of Cyprus.
So what our pain points that we had, selenium is all completely gone with Cyprus.
And once again, I'm complaining too much about Cyprus.
But yes, this is what it is, because we have a lot of base of community with selenium knowledge.
So that's why I'm comparing selenium in here.
But maybe I'll be comparing some other tools in future.
So I'm going to change this to Log-in and then I'm going to perform a click operation.
See, I just type click and that's the power of this reference.
So once I click and once I save, do you see it actually does things for me much easily.
And usually there is something that is New York.
So this time the page has been loaded and it went to New York.
This time it was a hypersomnia outcome.
But this time you have a new you are like slash Akande, slash log-in.
So how do I verify whether once I click this login button, I can see this new you are old page, so
for that you can do an assertion here.
So by default, it is actually doing things for me, like showing that it has navigated the new world.
But I can still verify that so far that there is something called a site Yoran method.
Where I can do something like should you can use this should to verify, include and include, as you
can see here, we have this account login.
So maybe I can put flash account slash login so I can just type that slash account, slash login.
And then once I say this, if I go here.
Do you see the assertion actually happened for me this time, so it checked whether it has this particular
account, last login being navigated into the page, which is very cool.
So once it is done.
You can still have some questions like what is this should and why are we suddenly using think this
should in here?
And once again, guys want to worry about the should assertion.
So there are like two ways of asserting in Cyprus.
One is implicit assertion and explicit assertions.
So we'll be talking about the explicit and implicit assertion on upcoming videos of this course.
But as of now, don't worry about it.
I'm just going to show you some of the awesome feature writing, such super simple test here so you
can just remember these two things with it and contains and then they're going to perform a great operation
to get this particular username.
And then we're going to perform an entry of text, admin and password is password.
So far doing that, how do we actually identify this particular element like username?
Instead we just directly inspect element.
You can do the same thing in here.
Very cool.
That's why I said welcome to the power of next version of automation.
Testing was once to do it right.
Click and if you could inspect it, it's going to show you exactly the same chrome dev tool that you
can see in the Chrome browser.
We were talking about this program in our next video, but as of now, you can see that it actually
shows a tool for us as well.
I'm just going to close this for a while.
And there is one way that I can identify the element is using this open select our playground.
Do you see, once I hit this, it shows me a blue color there.
So I can just see that it shows me hash, username, hash, password.
Dart, BGN, So all the L.A. fires, it's also been shown for me in this particular playground so I
can use this.
To select the element and you can see I get the command as well.
I can just copy this in the clipboard.
I can paste it over here so easy it is.
And then I can just do type.
I been that easy, it is similarly I can do for the password because I know for the password is password,
that's the ID and I can do type of password and I click the button, I just do dot median.
That's the class name.
And then I'm just a click method.
So once I save this instantly, our magic begins.
So it's doing the entry of username and password.
Click the login button.
It's waiting for the page to load.
Do you see that?
It just waited for the page to load.
Maybe I can really execute all the test using this button.
And you can see just waits for the page load and the page has been successfully loaded, navigated to
the new page, so it shows me everything instantly over here and this feature of moving through each
and every options and showing the previous execution history, they call it as time traveling.
So this time traveling is what is it shows the command being executed and where the typing is happening.
He shows that dart and all that stuff.
So this is how you can write a super simple command with Cyprus to perform an operation.
And this is how you can do some assertion as well.
In the next video, we'll talk about this playground a little bit and understand how we can leverage
the power of playground in much greater detail.
So, once again, thank you very much watching this video and have a great day.
