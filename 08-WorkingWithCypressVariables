Working with variables in Cyprus, so today we are going to be working with variables in Cyprus and
once again, the variables are nothing but the JavaScript variables that we are going to be working
at, something like a let or contest.
So these are the variables that is required for working within Cyprus.
But in order to work with Cyprus, it is not straightforward that you can have written something out
from a method and then perform an action on it.
Rather, in Cyprus, everything is a asynchronous and in order for the asynchronous to be resolved,
we need to use that then method.
So then method is mainly used to resolve the promises so that it can execute the code block within that
then before it starts working with the another set command.
So it is very, very important to understand how the commands are being executed within Cyprus.
So in order for that, I will show you quickly how the command execution order is been happening within
<Cyprus> Cypress.
So as you can see in our last video, we were executing this card like visiting the website.
And then Siwy contains the login and clicking the login link and then verifying if that includes this
particular euro.
And then we also perform a type operation of admin and password within the username and password, and
then we perform any operation following that.
So how does this execution happen within Cyprus?
So Cyprus framework or Cyprus architecture by itself is very, very different in nature then compared
to traditional JavaScript based execution.
So what it does is while it sees all these card, when it encounters all these cards that we have written,
the first thing it does is it put all these lines of code into what is called as a queue so it accumulates
all the operations that we have written into these kinds of queues, as you can see in here.
So it stores all these value into a queue.
And then finally it prepares a gigantic queue to execute.
The code that we have written to Cyprus by itself doesn't really execute every code line by line, rather,
therefore store everything in a queue and then the whole code will be executed.
And that's why the variable in here doesn't really make any sense if you return any value out from it.
For instance, if you want to return like Sadaat contains login, which is going to be like var A is
equal to Sadaat contains login if you want to return some value out from the login.
No, it won't really work that way.
If you want to perform that operation, you have to do in a very, very different way.
You have to use that then method to resolve the problem is by using the callback and then you need to
verify if the text really exist or are there.
So we are going to be writing a super simple code this time and see how it works so far that I'm gonna
flip to our studio code I.D..
All right.
So this is the same product which we are working in our previous video of this course.
And today we are going to be using the what is called azn method within this particular code that we
have written.
So even if you try to see the Cyprus library, if I go over here for the APIs.
And if you go to the guides and there is something called a variable and aliases and we'll be discussing
about areas later, you can see that they have clearly given that you cannot get a button, something
like this or even a farm, something like this, you actually can do what is called as the then method,
which is nothing but the promises which is available within JavaScript.
And this is called a closure's within JavaScript.
So don't worry about all these details over here.
So if you want, you can just go through the text from here.
But we are going to be making use of the same concept here to see how we can work with that.
So in order to make use of that, then we can actually do in many different ways.
One of the ways that I'm going to be doing is using the login button and will verify if the text of
the login is actually login.
So if I wanted to perform an operation using contains, basically, I cannot be able to assure you that
the reason is because that contains, as you can see here, it says that it gets the dominant element
containing the text and dom element that contains more than the desired element on the element can be
found.
That's it.
So you can see it just return to this one.
But by itself, the contains will give you the text, rather the element itself.
So if you try to make a change for this particular element, using a contains, as you can see here,
I can use that then method and then I can I just show you what is the problem if I use this using the
contents and then if I want to do a const off.
X. Let's assume or maybe link.
Text is equal to dollar link dot, and if I hear the doctor can see there is no supporting methods coming
in for that particular link because it doesn't really find that.
So even if you use the text, if you save it, you can see that it shows you.
This particular operation, and it just fails, but you can actually make this past and you can see
that because there is no intelligence is actually coming over here, it is high standards that you may
be missing some of the material which is currently not there, because we are just in the beginning
of the automation with JavaScript.
We may not know what is the method behind it.
And reason I know is because I know that there is a matter of context and that's why I'm directly using
it.
But maybe there are some methods which we may be missing and the intelligence is not showing that correctly,
so that you will be ending up with a problem.
So instead of using this way, there is another way that we can do.
But let's go with the approach that we have written right now, like I'm going to use and expect assertion
of TCHI this time.
And this is called as an explicit assertion.
So don't worry about the explicit and implicit assumption yet.
We'll be talking about that later.
But as of now, I'm just going to say is equals our deep equals to login.
So if I just do something like this and then I also need to add the next.
I will say this right now, if I see you can see that the test has got passed, so the assertion has
got passed here, but it somehow fails in here.
The reason is because we actually need to perform an operation.
If not, the third operation is going to fail.
Is nothing, but it includes the account login.
So in order to perform the click operation this time I can directly chain the click operation, something
like this.
I can save it.
And now you can see that it clicked and then performed the operation that easy.
It is so now I can actually perform the same operation that I used to perform before, but just that
we also have one more assertion using the variables that we have created over here.
And once again, as I said, the intelligence is not actually coming.
So if I see the text is not coming in here as it is supposed to come with Cyprus, the reason is because
this particular contains always is going to give you a raw element, like a text.
But I don't give you exactly that particular DOM element in order to make this element even more better
to work with.
Actually, you can see that are easier.
Automation's link of login actually has an idea of login link, so I'm just going to use that so I can
directly go over here.
I can put this as a login link here and that instead of contains I can use the get method and because
I use that get better this time.
Now if I hear Dot, you can see that I get all the intelligence which is required for me to perform
such an operation.
And you can see the text that is now coming in, the intelligence this time.
And it is going to be exactly the same thing which happened before.
And you can see the test as successfully running fine that any problem and the test will eventually
fail.
So this and the test will eventually pass.
So this is exactly the same thing that we can do.
But just that, make sure that the contains using the then operation will not resolve or maybe the intelligence
will not come for you.
But this way you can see that it is pretty easy to get all these options.
And finally, this particular link text that you can see or hear is something which has got focus only
within this particular block.
So let's say if you want to put this particular link, text over here and then if you try to access
this particular element or maybe if you verify verified expect from outside something like this instead
of verifying it from here, you can see right now itself automatically the desk has got Bembe.
The reason is because it is currently not being used or never been used, never been read by anyone
of the code.
So it is kind of declared, but it's never been used.
So it is telling that.
So it's basically losing the focus of this particular text somewhere else.
So let's say if you want to use this guy, the cons to link text, you're going to.
Use it from here so you can go for this guy from outside and then you can remove this guy or hear.
Right, so I'm just going to put this link outside, so I'm just going to say it right now, you can
see that I will be getting an error here.
The reason why I'm getting this error is because it says that it is an unexpected token.
So he doesn't really know that it is a concern that you can put outside of an ID block.
So maybe I can use of Autoblog this time.
And if I hit save, you can see that it is currently running and it fails again.
It says that it could and they will do fine with the undefined value.
So basically it has been resolved, but somehow it has been undefined.
So you cannot keep the variable outside of something like a block, like a global variable, and then
you can use this within your other court.
The reason, as I said before, is again, that in Cyprus, everything is being executed as a chain
of command.
So even if you try to execute, it is going to be asynchronous.
And the first thing is that it's going to execute that then block and then it is going to be executed
in the rest of the blocks.
So what happens is eventually here with it comes the value is going to be undefined for you because
it is going to be an asynchronous mode and it is not going to be executed by the time.
So the value for this particular text will not be resolved by this time.
And that's why we used to put everything in the den statement itself to perform the operation of expectance
and stuff of that nature.
Right.
So this is one more thing.
But in order to overcome this kind of problem, so let's say there is a situation where I need to for
sure verify this particular text from outside.
I don't really know how to verify this particular text to be within this particular block.
How do I do that?
Let's say there are many different situation.
This is one of the situation.
Let's say there is a situation where there is a road with their response or the request.
And I have to see if that particular responds is the one which I'm looking for from the particular you
are.
I don't know how to do the expected by the time.
Maybe I need to do it later point of time.
So if I want to do this kind of operation, there is something called Alias, which I can use to perform
the operation of storing the value within that particular alias of the variable and then use it in a
later point of time.
So we are going to be talking about the areas next where we will see the power of areas to store a variable
in an object and then accessing it from outside.
So will be discussing that next in our video followed by that would be discussing about Erap method
of Cyprus.
Thank you.
