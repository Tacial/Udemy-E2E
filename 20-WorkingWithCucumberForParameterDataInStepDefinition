So no matter how hard the definitions for the features that we have written here, we are going to be
writing some of the hindquarter code, rather the tool to generate the definition template for us.
So you cannot just generate a definition here, but rather you have to write it by yourself.
That is the pain point as of now.
I mean, there is no IDB to actually support that.
So in order to make use of that, we're going to do an import of the Cypress cucumber preprocessor plugin
and then we're going to call the method something like given and and then something like that.
So once we import that, we can then start using it.
Guys, that's very easy.
So we can just do something like given and the features is like I visit each site, so maybe I can just
copy this and I can pass it over here and then I can just say something like this and then not to visit.
We just do what seewhy dot with it.
And similarly there is another one and I click.
The login link, so I'm going to click the login link here, so again, that's going to be pretty simple
as well.
So I'm just going to be doing exactly the same thing like this.
And the next operation that is going to do is to enter the user name and password so far that I'm going
to be doing a little cheat here.
So it is going to look something like this.
As you can see, it says, I login in as a user with the username and password that you saw in the step
definition.
But this time, the username and password is passed as a string, as you can see here, so we are parsing
it like a string.
So basically the.
Preprocessor has no knowledge on converting the tapes dynamically, rather, you have to pass the tape
here like string.
What kind of tape it is, if it is in a deposit as an integer or something like that, so that you can
obtain the value out from it.
Right.
And then we are passing the apparent username and password and then I'm passing in the value like username
and password here to perform a click operation.
So this is how we can write the step definitions or implement the step definitions for this particular
feature file.
Now it's time to rock and roll and run the score and see how it works so far that I'm going to open
this Cyprus once again.
Over here.
And you can see this time we have this particular feature folder and there's a jazz file for this particular
folder under the Coomber folder.
So if I hit this, you can see it opened a new window for us.
And we expect it to run a test, but now it says that it has got an exception here and it says that
cannot leave the property to string for undefined.
So what does this really mean?
Well, if you see this error, it says that it cannot read the property to a string of undefined.
And if you actually see what the mistake that you have made in the code, you probably will never find
the issue.
Well, it would have actually added in the support page of the plugin or maybe the author would have
mentioned that.
But since it's not very clear in the documentation and since it's also a maturing plugin, you're just
not there in the documentation yet.
And it took some hard time for me to figure out, like, what is this problem?
Because there is no such to string or something like that.
So the problem is this.
You actually need to call what is called as a steps class.
And within the steps, actually, you have the option of performing an action within this given when
and then things of that nature.
So basically, you have to call the subdirectory within this particular input that you are doing.
And now if I just say this, you can see that it's not a very big deal at all.
You probably will see that it actually works.
So this is the only change that we actually have to make.
So if you just add a step, so basically when you do an empowered, you just make sure that you add
steps so that you will have that clear way of inputting the steps, packages of the given one and then
things of that nature.
That's why you have to add in here, because that's the only change that we have to make in here.
The code is pretty much the same, like how it was before.
And other than that, the code, as you can see, it just works fine without any problem.
Even the given Wenden statements are now working fine without any problem.
Right.
So and you can see now that this guy does that test structure is always showing a log of what's really
been typed.
For example, the user name admin is type admin and password is password being typed in here.
So for some reason, if you want to hide at this particular log so that I don't really have to show
you or maybe you don't have to show it to someone else, if you want to do this kind of stuff, then
probably you don't really have to encrypt things of that nature.
Rather, all you can do is because this logging is happening from here.
You can just see within this particular type, you also have an option of what is called a log.
So this log property will say is that it's going to log within the particular runner.
So if you said this to false to say it and now if you see what's really happening is it is not going
to show you the password.
You can see just password.
The type has not been displayed here.
So it's a cool trick that you can do while working with the tester, another that you don't really have
to show what's really being typed and things of that nature.
So this log as follows is going to do the trick for you, right?
So that's how we can work with the cucumber using cucumber preprocessor of Cyprus in know next video,
we'll see how we can make use of that data tables to work as if like we are working in a table format
that how we can use in protractor or maybe in synonyms, Shahbazi name Java and things of that nature.
So we are going to make use of that functionality to make this happen, which shall be discussing in
our next video.
