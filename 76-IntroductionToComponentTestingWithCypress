// Section 20: Cypress 7.0 - Component Testing

Hi, guys, my name is Karthik and I'm from Israel Automation, Dotcom, and welcome to another section
of workers entering to start a automation with Cyprus.
And in this section, are we talking about component testing with Cyprus seven or just released a couple
of days before?
And we'll be talking about it like how we can do the component testing using the component test run
of Cyprus?
Well, the component testing concept of Cyprus is already there behind the featured flag of Cyprus,
where you can enable the excitement of the future flag in the Cyprus config file.
And you should see the component testing.
I mean, you could do the component testing possibly, but there was not a component test run or as
such.
But now the Cyprus sound that you actually have very super easier way to run the component testing with
Cyprus standard and in this whole section will be dealing with component testing and a complete detail
like building an application and also testing that component that we have built in the reactor application.
So this is what is this section is all about?
I'd like to get started components.
What is this component?
If you have not really heard about the components in REACT or Englander's or various components are
independent and reusable bits of code.
They serve the same purpose as JavaScript functions, but works in isolation's and written Hesjedal
via a render function.
The components comes in two types.
One is the class component and another one is the functional competence.
And this is what is the whole component is all about.
And this is how the component is going to look like in an actual code that we are going to be writing
in this section.
And I will show you how we can actually deal with it.
I mean, it's not going to be like an obsession of how you can work with the REACT application and how
you can create the components itself.
But I'm just going to create a very super simple application using the existing template of the REACT
application, using the create react template.
And then you'd be adding a bits and pieces of code so that it is going to look more realistic for our
testing purposes so that we can understand how Cyprus actually test the components using its powerful
testing framework.
And then let's talk about the component test runner that we are talking about.
Cyprus component test or exiguous components in a browser as a user would do by simulating real interaction,
by using Cyprus robust driver.
And since it runs in a browser, you'll get to debug your components using your favorite developer tool.
As of today, the Cyprus team officially supports the following libraries and bundlers like react.
We'll get back roll ups and right.
But I guess in future that are going to be more bundlers and libraries supported by Cyperus team.
And Cyprus is releasing a lot of bundlers support along with it.
And I will show you what I really mean.
And in this section, we are going to be talking about the react bundlers support of Cyprus.
And the component testing comes with a lot of features as well, like fast startup and live reloads
or hot trailers and real browser support, not just that you can use in the development while doing
the testing purpose like unit testing.
You don't have to do that.
And no Pottuvil API is required and there is a in browser debugging experience that you will see that
is the power of Cyprus itself and that is going to be a network layer marketing with the site intercept,
which we can do to verify the XIKAR.
And it's also a server agonistic like the back roll are right.
You can just run on any server.
And also it has all the Siwy API support that we already know and love.
So those are the features that it has got in the component testing, which is quite interesting and
quite awesome.
And what is the difference between the entry and testing and the component testing?
Because we are going to be doing component testing suddenly in Cyprus, but we need to know the reason
of going to the component testing as opposed to the entry and testing.
Well, component designers are separate from the Cyprus into test run itself.
I mean, that itself is going to look a bit different.
They can be used either separately or together, but they share the same drivers over and commands that
we always use.
And the primary difference is that with Indian testing, you visit a Web server using Sadaat visit method
and the component testing, we need to mount our component directly using the Mount Command and I will
show you how the command is going to look like.
And then testing the component requires less infrastructure than testing the Web application itself
because it's going to be running on your local machine.
You don't even have to have a real applications database are back and to be running for that because
it's just going to be the component that you will be testing, the UI component that you'll be testing.
And if your component has an interaction with the already available APIs or XIKAR, you can do that
as well, or you can mark that aswell.
And Cyprus components are much, much faster than their Indian counterparts and Cyprus component tests
performed.
Similar to the component test executed within the north, baserunner like Just and Moka, which is quite
cool, and this is the major difference between the Indian test versus the component test.
And this is exactly what you'll be seeing, like how it's going to be looking like.
And this is exactly what I really love about the component test of Cyprus.
Well, we talked about the component testing, what is component testing, what is component and stuff,
let's see what is the predicate side of the component testing required in our existing app?
Like we need to be somehow intercepting our application.
We're going to be changing some of the code in our application side.
What we should be doing, it fell within our application like our whole application itself.
We don't really have to do any changes.
But the only thing which we need to add within our existing application code in order to enable the
testing is we need to add the Cyprus react bundler support like add Cyprus, react.
And then we also need to add at Cyprus vet back.
So so this is what is going to be communicating with your application and this is where it makes your
application to be agonistic to any RAPEX.
And we also need to add a components to be referred like where the testifiers are sitting and which
is the component folder or something, but the source folder or whatever it is.
And once we have this, we also need to start our Web back server and the best place to start is on
the plugins folder.
And as you can see, this is how we can do that.
And once we have this simple three step set up done, we can then start our testing.
And of course, we need to install the Cyprus.
That is very normal thing.
We already know about that.
I'm not going to be talking about that.
But once we have everything in place, we can then start doing our testing and the court is going to
look something like this.
And as you can see here, we have a command called a compound, which is new.
And this is where we're going to be mounting our application itself.
And once the application has been mounted, we can then perform the rest of the operation pretty much
using the Seida get and all those normal usual size framework or Cypress framework or that we can really
enable and use it.
So those thing comes into picture over here.
Well, as I said, as I told you, the Cyprus test runner is going to be a bit different then compared
to the intern test counterpart itself, because it's going to be a different test run altogether in
order to run the components.
We have a different command system.
You can use Yone or NPM, but the command for the John is going to look something like this.
John Cyprus open.
That's it.
So once we have this in place, we can then run our component testing and that's it.
This is the only thing we need to be doing for making the component testing possible within our Cyprus.
And it is going to be really, really awesome.
It's going to be much faster.
So let's quickly see everything in action, like whatever I have told just now as a quick demo and we'll
talk about upcoming videos like how we could actually make this thing happen in this whole section.
So I have already built an sampas react application and I'm just going to quickly run this and show
you how the test is going to look like aswell.
I'm using Yond this time instead of the NPM, like how we used to do in our earlier sections of the
course just for a change.
I'm using Yune, which is going to be really, really straightforward aswell.
And once I start that, you will see that that is going to be a component test coming up.
This is a new test which I was talking about, and you will see that this designer is now mounted directly
to this source file because we told in the Cyprus Jasen file to actually use this folder as a component
test folder.
And once we show that and once I click this Abdah Test out Deus Ex file, you will see that it is actually
going to run our application.
And actually it's doing a lot of testing over here.
So this is the component that I have built.
And this application, you can see that it is automatically selecting the right test over here because
it has the select operation and then it is doing and assertions over here.
And then it's also performing a verification of that particular text for this and are clicking this
checkbox.
And then I'm just filling up this particular Xbox over here.
And it's also clicking the recent and the nearby thing.
So you can see that all these are actually happening for you using the component tester.
This is really cool, right?
I mean, we could be able to achieve this much, much easily.
And I want to show you how all these things are happening starting over next lecture of this course.
Thank you.
