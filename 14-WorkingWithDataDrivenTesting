Data driven testing with fixtures and read files in Cyprus.
So today we are going to be working with another couple of mostly useful commands in Cyprus API, which
is nothing but the fixtures and read files.
Well, fixers and read files are the two different methods available in Cyprus to read our work with
external files said they do have a similar behavior with minor differences, but they work very well
in reading the files of many types.
Cyprus leaves these file types, as you can see here, like jazz on jazz, coffee, e-mail, text,
CSB, PMG, JPEG and all these file types.
But if you specify just the file name, let's say you just specify like user or maybe and password or
maybe if you specify something like settings, data, but without any extensions, it will read all
these files in this extension format.
So let's say if you have passed the file name as admin without passing any extension, then Cyprus will
go look to the fixture for the file name as amend our JSON admin Dargis.
And if the file is actually an admin chargeback, then it will find all the seven combinations on the
EBOW.
Then during the eight combination, it finds that OK, it's a Dipak file.
Then it just figured out that that is a JPEG file that you have passed and it just goes over there.
So this is how the reading of the file happens with fixture.
So you can see that by default, if you use the fixture, Cyprus fixer method will read the file from
the fixtures folder off the Cyprus.
But reading file or the read file method that you have actually looks from the Cyprus folder, rather,
from the fixtures folder.
That is one of the major difference.
But other than that, you cannot see major difference using Cyprus and fixed itself.
So for reading the files and fixture, all we have to do is this.
We have to just pass this side out fixture and then the file name is nothing but the user in our case.
And then I'm just using an alias to put that all value within any user so that I can then use the Seida
to get to play around with the user's alias variable.
Right.
So let's quickly see everything in action and understand how things work so far that I'm gonna flip
to.
This was truly a code idee.
All right.
So I'm just going to keep this to it blocks over here, as we discussed in our previous video.
And let's say if I just delete some of the values from here, because it's more like a duplicate code
and maybe from this really onwards, I'm just going to be creating another file over here.
I'm going to call this as yet app.
Spek d'arte.
Jazz and because these two methods are very, very, very applicable for the website, so I'm just going
to hold this guy over here and I'm just going to cut this cord from here.
And I'm going to paste it on the air app, because that's what is the exact meaning of it as well.
So that's your application.
And as you know, we can use the before.
OK, so I'm just going to decorate it with before.
And this is not logging in, but it is performing an elite operation.
All right.
That's cool.
So everything is done over here and now starting this video, we are going to be working with this profile.
Right?
As I said, I'm just going to be going to the IR app or Dargis file.
And within this particular file, what I'm going to do is I'm going to start parsing the username and
password details that we are parsing in over here from a external file.
So in order for doing that, all I'm going to do is this.
I'm going to head over to.
This particular folder, the fixtures folder, and you can see it by default, Cyprus has created this
example, our Jason file here.
So I'm probably going to get rid of these guys and I'm just going to call this maybe instead of examplar
Jason, maybe I'm going I'm just going to leave this for now because this is something using the examples
or here maybe you can have a look for that.
Rather, I'm just going to clear something out.
User Jason.
And within this, I'm just going to create two property, one is.
User name, which is admin, and another one is password, which is password.
So I'm just going to say what I saw here and then I'm going to head over to the year after spectrographs
file.
So as I said before, in order to read the fixture, I'm going to go to the before this time.
I'm just going to call the sidewalk fixture and here I can just pass the filename, which is nothing
but the user.
I'm not even going to give you the extension this time.
And I'm going to store in the areas as user.
So as you can see, two things are happening.
One is we have not passed the extension here and also we are using this picture within the before hug
and we are storing the variable within an alias.
And you can see that since it is installed in the areas, I can access the variable from anywhere up
to eight blocks as well.
That's the real power of Alia's.
So it can be anywhere within our ID block.
So this concept is called us sharing the context.
So basically you are sharing the context from one particular method block to another method block efficiently
and effortlessly without having any problem in that.
So as I said, I'm just going to use this user and I'm going to pass the username and password over
here so far doing that.
Let's do the Seida get.
And you know how to call the Alia's, we have to use the word.
At Symbol, right?
So I'm just going to use that and then I'm just going to say yuzu and once again, as I call back so
you can order a cake called things like how you can do any other programming languages like C Sharp
or Java.
So I'm going to do that.
And then for this particular admin.
This time, I'm just going to be reading from the Jasen file, so the username and password, right?
So I'm going to say user dot username.
User dot password.
So now I'm just going to say this guy.
So basically you can see that this time I'm reading the data, the username and password from the external
file, rather, the one which was there before within the hardcoded value.
Right.
So I'm just going to say this guy completely and I'm going to go over to my site, Cyprus test.
And you can see Cyprus has created this file for me.
They expect Dargis.
So it is currently executing, so now this time I expect my username and password to be passed from
the external file rather than one which us which was hard coded.
It seems like something is happening with our core.
So let me just see what's really happening.
Hmm.
Uh huh.
It seems like I have type something like a table and for some reason it is not being used.
So I guess that's the problem here.
So I'm just going to remove that guy and let's see what's really happening.
There you go now it enters the username and password, which is really cool, so I could be able to
see that this time it is performing all the operation which is expected so it could be able to enter
the username and password from the jasen file that we just created here.
So if you don't believe me, if I just remove this pass to pass password to pass and now if I try to
execute this code again, so our username and password is wrong, you can see your application is going
to throw us an error here like invalid login attempt.
But you know why the employee list is going to be displayed for us even if you have not fully logged
in.
So you can see there is a login not long ago this time.
So that's why the test is somehow getting passed.
But as you can see that this is how you can work with an external data using.
Cyprus, much efficiently and much easily without having any trouble working with it, so you can use
the same functionality in the read file as well to perform the operation.
And once again, I'm not really going to go into the read file to show you how things work.
It's pretty much the same like how it is for the fixer, but just that the file name is reading directly
from the fixative folder.
But for the read file, you need to specify where the particular file actually exists.
Actually, the file reading actually happens from the Cyprus folder, not from the fixer's folder level.
Right.
So that's it, guys.
This is how we can work with the external files for the relevant testing in our next video.
We are going to work with Cyprus custom commands.
