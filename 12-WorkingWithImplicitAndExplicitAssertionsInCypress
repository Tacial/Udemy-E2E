Today, we are going to work with assertions in <Cyprus> Cypress, some of the most useful and one of the most
important feature of any automation testing tool is asserting the operation that we are performing.
It can be anything.
It can be asserting the UAE validation can be asserting the response validation or it can be asserting
anything that you are performing within the application.
And you can get the output only if you do the assertions in the testing world.
So in order for that to be done, Cyprus bundles the popular TCHI Assertion Library, as well as some
helpful extensions for Synon and Jaquie, bringing you dozens of powerful assertions for free.
So basically all the different assertion libraries that is required for any JavaScript based applications
are JavaScript based automation testing tool.
Like in my other course in Udemy and YouTube protractor, we used to have these kind of libraries like
Mocca.
And tie within this assertion library for asserting the application or the test that we are writing,
but in here for Cyprus, everything is there within the extensions of the Cyprus Cyprus itself.
So any time that you install Cyprus, everything is there for you.
Well, as that said, there are two types of weighting mechanism available within Cyprus.
One is the implicit assertion and another one is the explicit assertion to have clearly mentioned that
there are two types of weighting mechanisms available in Cyprus, along with assertions.
So where does this weighting mechanism mean?
So, as you can see, there are two types of assertion like implicit and explicit.
But still, this implicit and explicit assertions work in conjunction sometime, maybe many time, and
they automatically have the weighting mechanism of Cyprus, which is available for any command within
the API of Cyprus, for instance.
The visit automatically makes some click rates type.
Wait.
So any operation that you do, Cyprus will wait for the operation to be successfully completed for that
period of time.
And if you want or maybe if you think that there is a huge number of waiting period, then you can probably
extend that as well.
Using that time our property.
And again, these are some of the things that you can do within Cyprus, and these are certain libraries
by itself are built with this weighting mechanism, which is really, really cool.
So Cyprus has the built in retry ability in almost every command, and especially the weight mechanism
in assertions are really, really handy.
So, for instance, if you're going to perform an implicit wait, which is nothing but using the should,
you can see that we can perform by getting an element and then we can specify a time out property,
which is nothing but time, what option for the get method.
And then we can call the sured and you can see that I'm doing a have that class and then I'm verifying
if this class exists.
So probably what I'm trying to do here is I'm just going to wait for this slider property and I'm verifying
if the slider too appears and it has the class as well as NAV active.
So only if it is then telling me that it is past.
If not, just throw me an error, something like that.
So these are many times the cases like in our applications will have this spinner loading icon and we
have to wait till the loading icon disappears is exactly the same thing in here, but rather just waiting.
We are also doing an assertion here to see if that particular class appears during runtime.
So you can see in this particular class doesn't really exist on the UI, but it verifies if this particular
option exists using this time out.
And this retrade mechanism is inbuilt within this particular assertion library, which is really, really
cool.
And that's exactly the same syntax for the explicit weight as well.
As you can see, we have used a conjunction of should along with the expect here.
So as you can see, the same syntax, but just that within the shirt I'm trying to use to expect to
have class this one.
So here's like an elaborate way of writing the code so you can write the code in a more elaborate way
so you can do a different way of asserting because you cannot just have multiple ways of asserting it.
You can have should have that class.
And if you want to chain again, probably there's going to be not a good deal or maybe it's not readable
as well.
So rather this is more readable and you can write all the chunks within this particular code block.
So this is why the explicit weight is kind of very handy.
And if you ask me what is a major difference, it's just the readability and it's very, very easy to
work with as well.
So let's quickly see everything in action and understand how things work so far that I'm going to flip
to Chrome browser.
I will show you a different website, updated automation, just execute automation site where it has
some animation on the page so that we can verify that animation really successes and we can verify if
that particular element actually exist.
So I'm gonna flip to Chrome browser.
And I'm going to navigate to extradimensional instead of blog.
I'm going to go to the site, I'm not sure how many people have really seen this particular website,
but this website has a lot of cool things like are the causes, informations and all those animations
and jobs here.
So you can see there are so many animations happening, like there is a slider rolling out and there
is some buttons coming up, like it shows like how many students have enrolled and even it has to be
approved as well.
But you can see like it has so many things happening.
So as you can see every time it scrolls that you made changes.
And my question is even more specific.
Something like I have developed this guy, but I have to see that this particular slider icon that I
can see in here, if the slider happens, this particular hole fills up with a white color thing.
So what does this animation like?
How do I tested this sort of animations?
This is a very, very each case, not people are going to be really testing these things at least.
But I just want to be more specific in my testing that I want to test this particular box or the round
thing just filling up with the value.
So in order for that to be done, I'm just going to right.
Click and I'm going to hit this inspect so that I can see what's really happening.
So if you can see here dynamically this particular class lesson, how active will change?
Can you see that it just changes based upon the sliding happens.
So if another slide is going to happen, the class disappears and this will be rendered here some easy.
All this rendering is happening for different classes.
So basically this particular laborer is getting different classes during this animation is actually
going to happen.
So it's kind of a loop which actually runs every time.
What a load the page.
So now the question is very, very simple.
I have to wait till this particular labor.
Has this class Ellas nav active, super simple, right?
So in order for that to be done, as I said before, I'm just going to be copying this particular locator.
I'm going to flip to our studio caller ID, and this is exactly the same call that we are working on
a previous video.
So I'm just going to maybe come on this bigger piece of code and I'm coming to this particular piece
of code.
But as you can see, this is a Abda Solmi dot com website and this is different website that we are
working today.
So in order for that to be done, I'm just going to be writing it blog once again.
And this time I'm going to be writing a different test case altogether.
So this test case is going to be like testing each site with four assertion I over here.
I'm just going to do exactly the same thing you say off of a set of.
W w w dot execute on a mission dot com slash site, and this guy is basically in his GDP and once I
have visitor here, I need to verify if that particular element actually appears for doing that.
I'm just going to do this site of get and then I'm just going to paste this particular element and you
can see that this element doesn't really work, so.
All right, so this is the element that I'm getting and then I'm just going to do this should.
I have class and you can see once I hit type the how and if I hit Dart, it brings me all the contextual
information for the paragraph.
So you can also use like B and if you see B dot class, something like that, there is no such thing
here.
So that's why we have like have got classes more readable as well.
It's more fluent and it's really relatable.
So we can just use this Howard class.
As what so what is the value that you're looking for?
So the value that I'm looking for is basically if I just go over here, it is kind of changing all the
time.
So maybe I can just copy paste it over here.
So I just want to see if this guy is actually coming.
So I'm just going to say this.
But the thing is, if I save it and if I go to the test run all this time and maybe if I just run this
guy.
You can see every time it only runs.
It runs the air test assertion, as well as the large intercessions like try to test actually running
every time, but now my ghost is like I don't really want to run Bodies' a block every time.
I just want to only run this particular test.
So I say onely, this test has to be executed in order for that to be done in the IT block or the IT
function.
We have something called us onely in Moka.
So if I use this one onely, if I save this, can you see it only runs this particular testing year
hopsital on.
This guy testing, yes, I'd rather the login application don't work that way, right, which is really,
really cool.
And you can see that it is running this particular test, but it is failing.
The reason is because if you see the application by itself is pretty slow.
I mean, the animation is pretty slow.
It brings in here it was made for some time.
But you can see this animation is not linked to the particular stuff and it fails.
So that's the reason we are going to be using an explicit weighting mechanism.
So far doing that, I can just hit control space.
You can see it brings the property like time out and there are different properties available, like
time old and log, so I can just use timeout and I just want to give you some random numbers here.
And I'm going to just say this.
And now if I see it actually lowers this particular garbage, so it waits for the powers to be fully
loaded.
And I was waiting for that to happen.
It's currently waiting for us very, very silently and once it goes to the other page.
It got passed, which is really, really cool.
So it actually wage the assertion actually waits for a certain operation to happen, like the.
Default mode, period.
And if you want to give extension time period, you can get an extended time period of like this timeout
period.
So this is how we can verify using the should command.
So as I said before, there are many different ways that we can even further enhance this particular
cord by using what it's called an explicit weight.
So in order for an explicit way to happen, I'm just going to copy this cord.
I mean, it's probably like a cheat, so I'm just going to copy paste it over here.
But within this shirt, I'm just going to call a callback here.
So let's call this as the daughter X and it in here.
I'm just going to call the exact method so you can see the expert is very, very handy as well, because
I didn't expect you can pass the target and then you can perform an action on that.
So I'm just going to pass the target as Dawla X.
And then there are many different matter that you have, like expect to be you can do this as well are
to have.
Glass, something like that, or you can do whatever combinations that you want to verify.
So I just want to do to have class as well as high from now, active, I can do that.
And then I can come on this call and I can say this.
So the behavior of this particular code execution is going to be pretty much the same, like how it
happened for the implicit and explicit rate.
Also, the behavior is pretty much the same like it was before.
You can see the isolation got passed.
Right.
So if you want to do some other assertions here, expect DART to be to not be null or something like
that.
I'm just giving them some examples here.
So if I just ran that you can see just wait for the page to load.
And that solution has got past because it is not null.
Of course, the object still exists there and that's why it is passed.
So you can do any sort of combination in this place and we are going to be using this expect and should
a lot in our course, because this is something which is very, very important.
And for sure, a solution has to be done in a lot of different places.
So we'll be using this assertion a lot in this video.
Right.
So this is how we can do the explicit as well as the implicit assertions using Cyprus.
So the next video will be discussing how to work with Hooke's.
