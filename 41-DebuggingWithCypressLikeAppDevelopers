So today we are going to discuss about debugging with Cyprus, more like a developer, so we have Nabisco's
about debugging with Cyprus and we're in our course and today we are going to be talking about that.
So I have seen a lot of comments coming from students like you that how we can debug with Cyprus and
what is the real power of Cyprus with the debugging.
So we have already talked about debugging a little bit, that by default, Cyprus playground returns
you a lot of assertions and it returns.
What is the actual behavior?
Are the output of the UI is actually happening within the playground as a label.
But if you want to really debug the application or if you want to put a breakpoint and see what is the
actual behavior of an application during that particular point, you can do that using what is called
a Cyprus debugging.
So with your Cyprus test score runs in the same run loop as your application, this means you have access
to the code running on the page as well as the things the browser makes available to you, like document
windows and of course, the debugger.
So basically the debugger here means the debugger, which is used to debug the JavaScript application
in the Chrome browser.
So that is exactly the keyword that we'll be using for debugging purpose here.
So basically we can use the debugger line in our discard something like this.
As you can see, we can just call the debugger within our code and then we can run the test for us.
And in the Cyprus documentation, it has been mentioned that you should not use the debugger or something
like this, because what happens is basically Cyprus runs a run loop and it stores everything in a queue
and then it performs the action.
So if you kind of use this debug or something like this sometime, the debugger point is not hit.
So again, that really makes sense.
Or you try to avoid this particular debugger here and make use of this debugger within your application,
which makes things more easier.
That's what is mentioned within the Cyprus documentation.
But fortunately, this debugging line is also valid.
You can still use that within your code, something like this, so that the debugger point will be hit
and you can verify the vice behavior or the functionality during that runtime of your test.
So this is one line that you can use the debuggers that are debugger keyword that is used in the JavaScript,
which is used exactly by developers to debug their application.
You can use this or as a shorthand, you can also use something like this.
So there is a debug method that you can use to perform the same debug operation that you can within
the debugger keyword.
And if you want to use the debugger within your application code, you can use something like this as
well.
So you can put this particular debugger line over here within your code and then you can see what's
really happening in your application.
We are going to be using a different application this time for this demo.
So we are going to be using the England application that we developed in our protractor because of the
automation testing that we discussed earlier.
So this is exactly the same application that will be grabbing from the GitHub and then will be using
that word here.
Right.
So let's quickly see everything in action and understand how things work so far that I'm not flip to
my Eitam terminal to grab the core zap.
All right.
So now I'm just going to open the.
My kids are so I'm just going to create an app and then I'm just going to navigate to the app and within
a year I'm just going to do a good clone of the this you are basically I'm just going to call this guy.
So if you go here to the er the app you cause up here you can see this is the exact same app that Yeager's
app and I get up.
So we are going to be using this particular application.
So I'm just going to clone this particular guy or here and I want to hit enter so you can see that the
Yeager's app has been cloned and then I'm just going to do it less.
So this is the Yeager's app, so I'm just going to navigate over there and then I'm just going to do
NPM install.
So that is going to install all the dependencies for me within the particular application.
Right.
Once this is done, I can start running the applications so I can quickly show you how it looks like.
I'm just going to do an NPM start and you can see the applications kind of running if I'm not wrong,
localhost zero.
Yep.
So it seems like the application is currently up and running.
So it is working for us right now, which is cool.
Right.
So I'm just going to close this guy over here and let me open the item terminal and let me stop this
guy.
And also I'm going to install the Cyprus over here.
So I'm just going to do an NPM install because this application has nothing.
So if I just open source to the accord, I can quickly show you how it looks like we close this test.
You can see this is the only application it has got, so we don't really have a Cyprus, so basically
we need to have Cyprus over here so that I can run the test within it.
So this is the dependencies I have got this time, but I don't really have Cyprus here.
So for that reason, I'm going to be insulting the Cyprus.
So NPM install, hyphen, hyphen offensive and of of Cyprus.
So this will install Cyprus for me within our within our project, within this particular, uh, code
in here.
All right.
So you can see that Cyprus has been added and then also need to have the Cyprus folder created for us.
So for that, I'm just going to do in Cyprus open.
So this way it will create a Cyprus folder for us or here.
Right.
As you can see, it is still creating.
So it has been created.
As you can see, the Cyprus folder has been there, is created for us.
I'm just going to close this guy and now I'm just going to run the test and see what's going to happen.
So for running the test, basically, as you can see, the application that we have is a little bit
different than what we have been testing all these days.
So, for instance, if I just open the or if I run the application once again on a Chrome browser,
so it's going to be localhost in zero 080.
So you can see that we have like four courses here, like sitting in front of and divide this frame
of development, Dakara on Windows and Android automation here.
So let's say if I want to test all the cards of the application and I want to see if it has a length
of, let's say four.
Right.
So if I want to do that, basically I can write a code which is going to be pretty easier and very,
very straightforward that we were doing all these days.
So I'm just going to go to the integration and I'm going to create a new file.
And it's called DACA cause spectate jazz.
So I'm going to write a code, something like this.
So as you can see, the code is very, very straightforward and simple.
All I did is I just described block for running for visiting within this particular localhost of eighty
eight zero eight, and then I'm going to test all the cards.
So basically I'm going to see if my card has a land of four in there.
I'm just going to save this guy.
And now if I try to run this particular test, so I'm just going to go here.
So why not just use the internal terminal at this time?
So I'm just going to do a.
Toggle integrated Domna and Big Cypress.
Run and hide from the spec, uh, which is going to be this guy, so I'm just going to copy the pad
over here.
And I'm going to hit enter, so if I do this, what happens is it is going to test and see if it has
the length of four in there.
So it's going to verify.
And you can see that the test has got passed, which is cool.
Right, which is running.
And now let's say if I want to change the length to, let's say five and if I want to test this.
So basically it is going to feel right because the land is actually not five, the length is actually
four and the test is going to fail.
So if I run this year, zap.
You can see that is going to basically fail because we expect it to be fired, but it has got four in
there.
So now if I want to debug this scenario and I want to see that, is it really running or not?
So if I want to do that, all I can do is I can select this developer tool and go to the toggle developer
tool option here so you can see that this guy comes in.
Right.
This is exactly the same developer tool that we conceived in our Chrome browser, basically.
And now if I just go back to my cord here and if I add a line called Debugger and I we can see that
the debugger point has been hit here after the be visible option here.
Right.
But what happens is you don't really get any context here.
So once you get the debugger, you don't really get the context of the do or something like that.
So, for instance, if I put a do here, you can see that the dude throws you an exception, something
like this, because you don't really see any dual here.
By the time you want to test it.
So you want to use this particular debugger line in the place that you really want to test something
like that.
So I want to see that you is actually five so I can use this particular debugger here.
Right. So this guy.
So how did it go?
And I'm going to save it and now if I try to run this again, you can see that this time the debugger
has been hit in here.
And now I get the context of dude, basically.
So now if I just put the deal here, you can see that I get a land of four, one, two, three, four,
and I can verify what's really happening behind the scene.
So this is exactly what I really require.
What I try to debug an application.
So if you use the debugger in a right position, in the right place where you want to debug your application,
that makes a lot of sense for us.
So this code right now makes a lot of sense because I can see what's really happening and where I want
to test.
So you cannot just randomly put a debugger somewhere within your code, because even if the debugger
hits, that's exactly what's mentioned in the Cyprus documentation.
Basically, if you put the debugger in place unnecessarily anywhere, even if you hit the debugger,
it really doesn't really give you any information or any useful information for you to debug.
Right.
So that's exactly where the debugger plays a key role in the plays that you use it.
And the next question is, what is the real purpose of importing the application and why I'm really
using this guide.
So let's say I want to stop this particular debugger.
I'm just going to save that.
And I've said I'm going to stop this execution of the test.
And if I want to modify the application behavior like a developer, like how they do, I'm going to
go to the app and I'm going to go to the causes.
And we have something called as causeless component products file, where you have something called
let's get causes to the get cause.
This is something which is responsible for getting all the causes for me within the application and
things of that nature so I can go to this particular place and I can add one more clause here, which
is going to be for Cyprus.
Let's say something like this.
Right.
And I'm going to save this guy.
So once I save this, it is going to basically be like five courses.
Right.
And I also want to add a debugger on the component here so I can just put the bug over here and now
if I go to the Cyprus here.
So now I have removed the debugger from the test code, but the debugger is currently sitting in the
application.
And since the Cyprus runs on the same application loop, the debugger point of the application actually
hits even in your test code.
So now if I run the test, what happens is you can see that this guy is actually coming from the application,
rather your test code itself.
So that's exactly what we discussed in our slide, that Cyprus runs on the same run loop of the application.
So once it runs the application, you can see that this particular debugger point has been hit.
And now I can see what's really happening within this particular code.
So you can see that now the debugger is going to return me what's really going to happen.
So let's see and evaluate in the console.
You can see that it runs me like five objects.
And these five objects basically are these guys.
Right?
So now we can see that it is currently five instead of four.
And now if I just try to run the test, you can see that this time that this has got past now since
we have like five causes this time and we expect our test to have the Lentol five as well.
And the test is currently passing.
So this is how you can perform a debugging operation within your test code, or you can put the debugger
within our application code and you can see that the same debug point has been hit with the new Cyprus
in two different area, in two different context based on how you try to debug your application.
This is exactly how developer tested application during testing their UI, both in real time world as
well as during the testing operation in unit testing.
That's exactly what we can leverage the power in Cyprus as well, which is really, really cool.
So this is how you can do debugging operation in Cyprus is much easier and much greater fashion, so
you can leverage the same power of how your developers do the debugging operation of debugger in the
console.
And also you can do the breakpoint, you can do the large, you can use a call stack, scope's breakpoint,
exits Breakpoint and Dom Breakpoint.
You can do all sorts of jobs here, basically straight into your Chrome browser using the developer
tool in much easier fashion.
So once again, thank you very much for watching this video and have a great day.
